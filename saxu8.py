import telebot
from telebot import types
import sqlite3
from datetime import datetime, timedelta
import random
import string
import os
import csv
import config
import photos
import threading
import pytz
import re  # Added for phone validation

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ö–æ–ª–¥–∞
try:
    MIN_HOLD_MINUTES = int(getattr(config, 'MIN_HOLD_MINUTES', 54))
except Exception:
    MIN_HOLD_MINUTES = 54

def adapt_datetime(dt):
    return dt.isoformat()

sqlite3.register_adapter(datetime, adapt_datetime)

def convert_datetime(s):
    if isinstance(s, bytes):
        s = s.decode('utf-8')
    return datetime.fromisoformat(s)

sqlite3.register_converter("DATETIME", convert_datetime)

bot = telebot.TeleBot(config.BOT_TOKEN)

conn = sqlite3.connect('bot.db', check_same_thread=False, detect_types=sqlite3.PARSE_DECLTYPES)
cursor = conn.cursor()

# Initialize database tables
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    reputation REAL DEFAULT 10.0,
    balance REAL DEFAULT 0.0,
    subscription_type TEXT,
    subscription_end DATETIME,
    referral_code TEXT,
    referrals_count INTEGER DEFAULT 0,
    profit_level TEXT DEFAULT '–Ω–æ–≤–∏—á–æ–∫',
    card_number TEXT,
    cvv TEXT,
    card_balance REAL DEFAULT 0.0,
    card_status TEXT DEFAULT 'inactive',
    card_password TEXT,
    card_activation_date DATETIME,
    phone_number TEXT,
    last_activity DATETIME,
    api_token TEXT,
    block_reason TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS admins (
    id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS queue (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    phone_number TEXT UNIQUE,
    added_time DATETIME,
    type TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS working (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    phone_number TEXT UNIQUE,
    start_time DATETIME,
    admin_id INTEGER,
    type TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS successful (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    phone_number TEXT,
    hold_time TEXT,
    acceptance_time DATETIME,
    flight_time DATETIME,
    type TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS blocked (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    phone_number TEXT,
    type TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS referrals (
    referer_id INTEGER,
    referee_id INTEGER,
    PRIMARY KEY (referer_id, referee_id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS withdraw_requests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    amount REAL,
    status TEXT DEFAULT 'pending'
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    action TEXT,
    timestamp DATETIME
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS admin_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    admin_id INTEGER,
    action TEXT,
    timestamp DATETIME
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS status (
    key TEXT PRIMARY KEY,
    value TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS card_history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    amount REAL,
    timestamp DATETIME,
    type TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS transfers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    from_user_id INTEGER,
    to_user_id INTEGER,
    amount REAL,
    timestamp DATETIME
)
''')

cursor.execute("INSERT OR IGNORE INTO status (key, value) VALUES ('work_status', 'Full work üü¢')")
conn.commit()

# Add initial admin
cursor.execute("INSERT OR IGNORE INTO admins (id) VALUES (?)", (config.ADMIN_IDS[0],))
conn.commit()

pending_activations = {}  # To store admin_id for pending activations
pending_timers = {}  # To store timers for cancellation

def is_subscribed(user_id):
    try:
        member = bot.get_chat_member(config.CHANNEL, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

def generate_referral_code(user_id):
    return f"ref_{user_id}"

def get_profit_level(referrals, is_admin=False):
    if is_admin:
        return 'ADMIN FAX'
    if referrals < 10:
        return '–Ω–æ–≤–∏—á–æ–∫'
    elif referrals < 30:
        return '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'
    elif referrals < 60:
        return '–≤–æ—Ä–∫–µ—Ä'
    elif referrals < 90:
        return 'VIP WORK'
    else:
        return 'VIP WORK'

def is_admin(user_id):
    cursor.execute("SELECT * FROM admins WHERE id = ?", (user_id,))
    return cursor.fetchone() is not None

tz = pytz.timezone('Europe/Moscow')

def log_action(user_id, action):
    cursor.execute("INSERT INTO logs (user_id, action, timestamp) VALUES (?, ?, ?)", (user_id, action, datetime.now(tz)))
    conn.commit()

def log_admin_action(admin_id, action):
    cursor.execute("INSERT INTO admin_logs (admin_id, action, timestamp) VALUES (?, ?, ?)", (admin_id, action, datetime.now(tz)))
    conn.commit()

def get_user(user_id):
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    row = cursor.fetchone()
    if row:
        columns = [desc[0] for desc in cursor.description]
        return dict(zip(columns, row))
    return None

def update_user(user_id, **kwargs):
    set_clause = ', '.join(f"{k} = ?" for k in kwargs)
    values = list(kwargs.values()) + [user_id]
    cursor.execute(f"UPDATE users SET {set_clause} WHERE id = ?", values)
    conn.commit()

def get_queue():
    cursor.execute("SELECT * FROM queue ORDER BY added_time ASC")
    rows = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    return [dict(zip(columns, row)) for row in rows]

def get_user_queue(user_id):
    cursor.execute("SELECT * FROM queue WHERE user_id = ? ORDER BY added_time ASC", (user_id,))
    rows = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    return [dict(zip(columns, row)) for row in rows]

def get_working(user_id=None):
    if user_id:
        cursor.execute("SELECT * FROM working WHERE user_id = ?", (user_id,))
    else:
        cursor.execute("SELECT * FROM working")
    rows = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    return [dict(zip(columns, row)) for row in rows]

def get_successful(user_id=None):
    if user_id:
        cursor.execute("SELECT * FROM successful WHERE user_id = ?", (user_id,))
    else:
        cursor.execute("SELECT * FROM successful")
    rows = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    return [dict(zip(columns, row)) for row in rows]

def get_blocked(user_id=None):
    if user_id:
        cursor.execute("SELECT * FROM blocked WHERE user_id = ?", (user_id,))
    else:
        cursor.execute("SELECT * FROM blocked")
    rows = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    return [dict(zip(columns, row)) for row in rows]

def get_status(key):
    cursor.execute("SELECT value FROM status WHERE key = ?", (key,))
    row = cursor.fetchone()
    return row[0] if row else None

def set_status(key, value):
    cursor.execute("REPLACE INTO status (key, value) VALUES (?, ?)", (key, value))
    conn.commit()

def generate_card_number():
    return ''.join(random.choices(string.digits, k=16))

def generate_cvv():
    return ''.join(random.choices(string.digits, k=3))

def generate_api_token():
    part1 = ''.join(random.choices(string.digits, k=4))
    part2 = ''.join(random.choices(string.digits, k=9))
    return f"{part1}:{part2}"

def calculate_hold(accept_time, flight_time):
    delta = flight_time - accept_time
    minutes = delta.total_seconds() / 60
    if minutes >= MIN_HOLD_MINUTES:
        hours = int(minutes // 60)
        mins = int(minutes % 60)
        return f"{hours:02d}:{mins:02d}"
    return None

def get_price_increase(sub_type):
    if not sub_type:
        return config.PRICES['hour'], config.PRICES['30min']
    sub = config.SUBSCRIPTIONS.get(sub_type, {})
    return sub.get('price_increase_hour', 0), sub.get('price_increase_30min', 0)

def sort_queue(queue):
    def key_func(item):
        user = get_user(item['user_id'])
        rep = user['reputation']
        sub = user['subscription_type']
        priority = 0
        if sub == 'VIP Nexus':
            priority = 4
        elif sub == 'Prime Plus':
            priority = 3
        elif sub == 'Gold Tier':
            priority = 2
        elif sub == 'Elite Access':
            priority = 1
        return (-priority, -rep, item['added_time'])
    return sorted(queue, key=key_func)

def show_main_menu(chat_id, edit_message_id=None):
    user = get_user(chat_id)
    if not user:
        return
    username = user['username']
    status = get_status('work_status')
    reputation = user['reputation']
    balance = user['balance']
    queue_count = len(get_queue())
    user_queue_count = len(get_user_queue(chat_id))
    caption = f"@{username} | Full Work\n‚û¢–°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–∞: {status}\n‚û£–†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}\n‚û¢–ë–∞–ª–∞–Ω—Å: {balance}\n‚ïì–û–±—â–∞—è –æ—á–µ—Ä–µ–¥—å: {queue_count}\n‚ïë\n‚ïö–¢–≤–æ–∏ –Ω–æ–º–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥–∏: {user_queue_count}"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä üöÄ", callback_data="add_number"), types.InlineKeyboardButton("–ú–æ–∏ –Ω–æ–º–µ—Ä–∞ üì±", callback_data="my_numbers"))
    markup.add(types.InlineKeyboardButton("–û—á–µ—Ä–µ–¥—å üîÑ", callback_data="queue"), types.InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data="stats"))
    markup.row(types.InlineKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§", callback_data="profile"))
    if edit_message_id:
        bot.edit_message_media(chat_id=chat_id, message_id=edit_message_id, media=types.InputMediaPhoto(photos.PHOTOS['start'], caption=caption), reply_markup=markup)
    else:
        bot.send_photo(chat_id, photos.PHOTOS['start'], caption=caption, reply_markup=markup)

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.chat.id
    username = message.from_user.username or str(user_id)
    ref = message.text.split()[1] if len(message.text.split()) > 1 else None
    user = get_user(user_id)
    if not user:
        referral_code = generate_referral_code(user_id)
        cursor.execute("INSERT INTO users (id, username, referral_code, last_activity, profit_level) VALUES (?, ?, ?, ?, ?)", (user_id, username, referral_code, datetime.now(tz), '–Ω–æ–≤–∏—á–æ–∫'))
        conn.commit()
        if ref and ref.startswith('ref_'):
            referer_id = int(ref[4:])
            if referer_id != user_id:
                cursor.execute("INSERT OR IGNORE INTO referrals (referer_id, referee_id) VALUES (?, ?)", (referer_id, user_id))
                conn.commit()
                referer = get_user(referer_id)
                update_user(referer_id, balance=referer['balance'] + config.REFERRAL_REWARD, referrals_count=referer['referrals_count'] + 1)
                referrals = get_user(referer_id)['referrals_count']
                profit = get_profit_level(referrals, is_admin=is_admin(referer_id))
                update_user(referer_id, profit_level=profit)
                bot.send_message(referer_id, f"+${config.REFERRAL_REWARD} –∑–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ [{user_id}]")
                bot.send_photo(referer_id, photos.PHOTOS['new_profit'])
    else:
        update_user(user_id, last_activity=datetime.now(tz))
    if not is_subscribed(user_id):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üì¢", url="https://t.me/NafuzorTime"))
        markup.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ", callback_data="check_sub"))
        markup.add(types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ üìú", callback_data="rules"))
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.", reply_markup=markup)
    else:
        show_main_menu(user_id)

@bot.callback_query_handler(func=lambda call: call.data == "check_sub")
def check_sub(call):
    if is_subscribed(call.from_user.id):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        show_main_menu(call.message.chat.id)
    else:
        bot.answer_callback_query(call.id, "–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data == "add_number")
def add_number_type_choice(call):
    caption = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–º–µ—Ä–∞"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–º–∞–∫—Å", callback_data="add_max"), types.InlineKeyboardButton("–≤—Ü", callback_data="add_vc"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_main"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['start'], caption=caption), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["add_max", "add_vc"])
def add_number(call):
    number_type = 'max' if call.data == "add_max" else 'vc'
    if number_type == 'max':
        caption = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX"
    else:
        caption = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 9XXXXXXXXX"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="add_number"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['start'], caption=caption), reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_add_number, call.message.message_id, number_type)

def process_add_number(message, message_id=None, number_type=None):
    phone = message.text.strip()
    if number_type == 'max':
        if not re.match(r'\+7\d{10}', phone):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            add_number_type_choice(types.CallbackQuery(id=str(random.randint(1,10000)), from_user=message.from_user, message=message, data="add_number"))
            return
    else:
        if len(phone) != 10 or not phone.isdigit() or not phone.startswith('9'):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            add_number_type_choice(types.CallbackQuery(id=str(random.randint(1,10000)), from_user=message.from_user, message=message, data="add_number"))
            return
    cursor.execute("SELECT * FROM queue WHERE phone_number = ?", (phone,))
    if cursor.fetchone():
        bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
        show_main_menu(message.chat.id)
        return
    cursor.execute("INSERT INTO queue (user_id, phone_number, added_time, type) VALUES (?, ?, ?, ?)", (message.chat.id, phone, datetime.now(tz), number_type))
    conn.commit()
    log_action(message.chat.id, f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–º–µ—Ä {phone} —Ç–∏–ø–∞ {number_type}")
    show_main_menu(message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == "my_numbers")
def my_numbers(call):
    caption = "–ú–æ–∏ –Ω–æ–º–µ—Ä–∞"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–í —Ä–∞–±–æ—Ç–µ ‚öôÔ∏è", callback_data="my_working"), types.InlineKeyboardButton("–û–∂–∏–¥–∞–µ—Ç ‚è≥", callback_data="my_queue"))
    markup.add(types.InlineKeyboardButton("–£—Å–ø–µ—à–Ω—ã–µ ‚úÖ", callback_data="my_successful"), types.InlineKeyboardButton("–ë–ª–æ–∫ üõë", callback_data="my_blocked"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_main"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['start'], caption=caption), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("my_"))
def show_my_list(call):
    data = call.data
    if data == "my_queue":
        items = get_user_queue(call.message.chat.id)
        title = "–û–∂–∏–¥–∞–µ—Ç"
    elif data == "my_working":
        items = get_working(call.message.chat.id)
        title = "–í —Ä–∞–±–æ—Ç–µ"
    elif data == "my_successful":
        items = get_successful(call.message.chat.id)
        title = "–£—Å–ø–µ—à–Ω—ã–µ"
    elif data == "my_blocked":
        items = get_blocked(call.message.chat.id)
        title = "–ë–ª–æ–∫"
    caption = f"{title}\n" + "\n".join(f"{item['phone_number']} ({item['type']})" for item in items) if items else f"{title}: –ü—É—Å—Ç–æ"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="my_numbers"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "queue")
def show_queue(call):
    user = get_user(call.message.chat.id)
    sub = user['subscription_type']
    if sub in ['Gold Tier', 'Prime Plus', 'VIP Nexus']:
        queue = sort_queue(get_queue())
        caption = "–û—á–µ—Ä–µ–¥—å:\n" + "\n".join(f"{item['phone_number']} ({item['type']})" for item in queue) if queue else "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"
    else:
        caption = f"–û–±—â–∞—è –æ—á–µ—Ä–µ–¥—å: {len(get_queue())}"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_main"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "stats")
def show_stats(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º", show_alert=True)
        return
    stats = get_successful()
    caption = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" + "\n".join(f"{get_user(item['user_id'])['username']}-{item['phone_number']} ({item['type']})-—Ö–æ–ª–¥: {item['hold_time']}" for item in stats if item['hold_time'])
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_main"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "profile")
def show_profile(call):
    user = get_user(call.message.chat.id)
    username = user['username']
    reputation = user['reputation']
    sub = user['subscription_type'] or ""
    price_hour, price_30 = get_price_increase(sub)
    price_text = f"—á–∞—Å-{price_hour}$ 30–º–∏–Ω-{price_30}$" if sub else ""
    balance = user['balance']
    caption = f"‚ñ∂ –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n‚ïì–†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}\n‚ïë\n‚ïö –ü–æ–¥–ø–∏—Å–∫–∞: {sub}\n‚ñ∂ –ü—Ä–∞–π—Å: {price_text}\n‚ïì –ë–∞–ª–∞–Ω—Å: ${balance}"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üí≥", callback_data="buy_sub"), types.InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üîó", callback_data="referral"))
    markup.add(types.InlineKeyboardButton("–ö–∞—Ä—Ç–∞ üí≥", callback_data="card"), types.InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ üìú", callback_data="rules"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_main"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['profile'], caption=caption), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "rules")
def show_rules(call):
    rules_text = "–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞\n1Ô∏è‚É£ –ß—Ç–æ –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –Ω–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ!\n‚ÄºÔ∏è‚ÄºÔ∏è –Æ–ó–´ –ù–ï –ú–ï–ù–Ø–¢–¨, –ö–¢–û –ë–´ –í–ê–ú –ù–ò –ü–ò–°–ê–õ! –ß–¢–û –ë–´ –í–ê–ú –ù–ò –ü–ò–°–ê–õ–ò! ‚ÄºÔ∏è‚ÄºÔ∏è\n‚ÄºÔ∏è‚ÄºÔ∏è –°–ú–ï–ù–ò–¢–ï –Æ–ó ‚Äì –û–°–¢–ê–ù–ï–¢–ï–°–¨ –ë–ï–ó –í–´–ü–õ–ê–¢–´! –ë–£–î–ï–¢–ï –ü–û–¢–û–ú –ñ–ê–õ–û–í–ê–¢–¨–°–Ø! ‚ÄºÔ∏è‚ÄºÔ∏è\n‚ÄºÔ∏è‚ÄºÔ∏è –ï–°–õ–ò –í–ê–° –ü–û –ö–ê–ö–û–ô-–¢–û –ü–†–ò–ß–ò–ù–ï –ó–ê–ë–ê–ù–ò–õ–ò (–†–ï–ö–õ–ê–ú–ê, –°–ö–ê–ú, –ü–ï–†–ï–õ–ò–í –ò –¢.–î.) ‚Äì –õ–ò–®–ï–ù–ò–ï –í–´–ü–õ–ê–¢–´! ‚ÄºÔ∏è‚ÄºÔ∏è\n\n2Ô∏è‚É£ –ï—Å–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä –æ—Ç—Å—Ç–æ—è–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —á–∞—Å, –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –Ω–∏–∫–∞–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤.\n–ú—ã —Å–∞–º–∏ —Å–∫–∏–Ω–µ–º —Ç–∞–±–µ–ª—å –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É.\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ –∏–º–µ–Ω–Ω–æ –æ—Ç—Å—Ç–æ—è–ª –≤–∞—à –Ω–æ–º–µ—Ä, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /hold ‚Äì –æ–Ω–∞ –ø–æ–∫–∞–∂–µ—Ç –Ω–æ–º–µ—Ä –∏ —Ö–æ–ª–¥! üìä\n\n3Ô∏è‚É£ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?\n\n–ù–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª.\n\n–í–ø–∏—Å—ã–≤–∞–µ—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 9XXXXXXXXX.\n\n–ñ–¥—ë—Ç–µ, –ø–æ–∫–∞ –≤–∞—à –Ω–æ–º–µ—Ä –≤–æ–∑—å–º—É—Ç –≤ —Ä–∞–±–æ—Ç—É.\n\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n‚úÜ (–í–∞—à –Ω–æ–º–µ—Ä) –ó–ê–ü–†–û–° –ê–ö–¢–ò–í–ê–¶–ò–ò\n‚úé –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: 2 –º–∏–Ω—É—Ç—ã\n‚úî –¢–í–û–ô –ö–û–î: (–∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –æ—Ç —Å–∫—É–ø–∞)\n\n–ù–∏–∂–µ –±—É–¥—É—Ç –¥–≤–µ –∫–Ω–æ–ø–∫–∏: ¬´–í–≤—ë–ª¬ª –∏ ¬´–°–∫–∏–ø¬ª.\n\n–ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´–í–≤—ë–ª¬ª, –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–π–¥—ë—Ç –≤ —Ä–∞–∑–¥–µ–ª ¬´–í —Ä–∞–±–æ—Ç–µ¬ª ‚Äì —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –∫–æ–¥. ‚úÖ\n\n–ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´–°–∫–∏–ø¬ª, –Ω–æ–º–µ—Ä —É–¥–∞–ª–∏—Ç—Å—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –Ω–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. ‚ùå\n\n4Ô∏è‚É£ –ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞?\n–ù–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –Ω–æ–º–µ—Ä–∞¬ª –∏ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç (–≤—Å–µ–≥–æ 4):\n\nüîπ –í —Ä–∞–±–æ—Ç–µ ‚Äì –Ω–æ–º–µ—Ä –µ—â—ë —Å—Ç–æ–∏—Ç.\nüîπ –û–∂–∏–¥–∞–µ—Ç ‚Äì –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏, –µ–≥–æ –µ—â—ë –Ω–µ –≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É.\nüîπ –£—Å–ø–µ—à–Ω—ã–µ ‚Äì –Ω–æ–º–µ—Ä —Å —Ö–æ–ª–¥–æ–º –±–æ–ª–µ–µ 54 –º–∏–Ω—É—Ç (–±—É–¥–µ—Ç –≤—ã–ø–ª–∞—Ç–∞). üí∞\nüîπ –ë–ª–æ–∫ ‚Äì –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–ª –±–µ–∑ —Ö–æ–ª–¥–∞.\n\n5Ô∏è‚É£ –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\nüî∏ /hold ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à —Ö–æ–ª–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Å —Ö–æ–ª–¥–æ–º –æ—Ç 54 –º–∏–Ω).\nüî∏ /del ‚Äì —É–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (—Ñ–æ—Ä–º–∞—Ç: /del –Ω–æ–º–µ—Ä).\nüî∏ /menu ‚Äì –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é.\n\n6Ô∏è‚É£ –ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–∞–π—Å? üöÄ\n–í –Ω–∞—à–µ–º –±–æ—Ç–µ –º–æ–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–∞–π—Å —Å –ø–æ–º–æ—â—å—é –ø–æ–¥–ø–∏—Å–∫–∏! –¶–µ–Ω—ã –Ω–∏–∑–∫–∏–µ, –∞ –±–æ–Ω—É—Å—ã —Å–æ—á–Ω—ã–µ! üòç\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n\nElite Access (+6,4$) üíµ –¶–µ–Ω–∞: 2 USDT\n\nGold Tier (+7$) üí∞ –¶–µ–Ω–∞: 2,3 USDT\n\nPrime Plus (+9$) üöÄ –¶–µ–Ω–∞: 3 USDT\n\nVIP Nexus (+15$) üî• –¶–µ–Ω–∞: 4 USDT\n\n–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç 1 –º–µ—Å—è—Ü (–ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Å–Ω–æ–≤–∞)."
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['rules'], caption="–ü—Ä–∞–≤–∏–ª–∞"))
    bot.send_message(call.message.chat.id, rules_text, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile")))

@bot.callback_query_handler(func=lambda call: call.data == "buy_sub")
def buy_sub(call):
    caption = "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
    markup = types.InlineKeyboardMarkup()
    for sub, data in config.SUBSCRIPTIONS.items():
        markup.add(types.InlineKeyboardButton(sub, url=data['payment_link']))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['buy_sub'], caption=caption), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "referral")
def show_referral(call):
    user = get_user(call.message.chat.id)
    referrals = user['referrals_count']
    profit = user['profit_level']
    balance = user['balance']
    ref_link = f"https://t.me/{bot.get_me().username}?start={user['referral_code']}"
    caption = f"‚ñ∂–†–µ—Ñ–µ—Ä–∞–ª—ã: {referrals}\n‚ñ∂–ü—Ä–æ—Ñ–∏—Ç: {profit}\n‚ñ∂–ë–∞–ª–∞–Ω—Å: {balance}\n‚ñ∂–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞: {ref_link}"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í—ã–≤–æ–¥ üí∏", callback_data="withdraw"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['referral'], caption=caption), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "withdraw")
def withdraw(call):
    user = get_user(call.message.chat.id)
    if user['balance'] < config.MIN_WITHDRAW:
        bot.answer_callback_query(call.id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ $50", show_alert=True)
        return
    caption = "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ —é–∑–µ—Ä–Ω–µ–π–º"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="referral"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['withdraw'], caption=caption), reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_withdraw, call.message.message_id)

def process_withdraw(message, message_id):
    text = message.text.split()
    if len(text) != 2 or not text[0].replace('.', '', 1).isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        show_profile(types.CallbackQuery(id=str(random.randint(1,10000)), from_user=message.from_user, message=message, data="profile"))
        return
    amount = float(text[0])
    username = text[1]
    user = get_user(message.chat.id)
    if amount > user['balance'] or amount < config.MIN_WITHDRAW:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞")
        show_profile(types.CallbackQuery(id=str(random.randint(1,10000)), from_user=message.from_user, message=message, data="profile"))
        return
    cursor.execute("INSERT INTO withdraw_requests (user_id, amount) VALUES (?, ?)", (message.chat.id, amount))
    conn.commit()
    bot.send_message(message.chat.id, "–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
    show_profile(types.CallbackQuery(id=str(random.randint(1,10000)), from_user=message.from_user, message=message, data="profile"))

@bot.callback_query_handler(func=lambda call: call.data == "card")
def show_card(call):
    user = get_user(call.message.chat.id)
    if user['card_status'] == 'blocked':
        if user['block_reason'] == 'admin':
            caption = "–ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile"))
            bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
            return
        elif user['block_reason'] == 'user':
            if user['card_activation_date'] and (datetime.now(tz) - user['card_activation_date']) >= timedelta(days=30):
                update_user(call.message.chat.id, card_status='inactive', block_reason=None)
                user = get_user(call.message.chat.id)  # Reload user
            else:
                remaining = timedelta(days=30) - (datetime.now(tz) - user['card_activation_date'])
                caption = f"–ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π. –û—Å—Ç–∞–ª–æ—Å—å: {remaining.days} –¥–Ω–µ–π"
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile"))
                bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
                return

    if user['card_status'] == 'inactive':
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å üîì", callback_data="activate_card"))
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile"))
        bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['card'], caption="–ö–∞—Ä—Ç–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"), reply_markup=markup)
        return

    # active
    caption = "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∫–∞—Ä—Ç—ã"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['card'], caption=caption), reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, check_card_password, call.message.message_id)

def check_card_password(message, message_id):
    user = get_user(message.chat.id)
    if message.text != user['card_password']:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        show_profile(types.CallbackQuery(id=str(random.randint(1,10000)), from_user=message.from_user, message=message, data="profile"))
        return
    display_card(message.chat.id, message_id)

def display_card(chat_id, edit_id):
    user = get_user(chat_id)
    card_num = user['card_number']
    cvv = user['cvv']
    balance = user['card_balance']
    status = '–∞–∫—Ç–∏–≤–Ω–∞' if user['card_status'] == 'active' else '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞'
    api_token = user.get('api_token')  # Use .get to avoid KeyError
    if not api_token:
        api_token = generate_api_token()
        update_user(chat_id, api_token=api_token)
    caption = f"üí≥–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {card_num}\n‚öôÔ∏èCVV: {cvv}\nüí∞–±–∞–ª–∞–Ω—Å: {balance}\nüíæ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ: {status}\n\n–≤–∞—à –∞–ø–∏ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã:\n{api_token}\n!–ù–ò–í–ö–û–ï–ú –°–õ–£–ß–ê–ï –ù–ò–ö–û–ú–£ –ï–ì–û –ù–ï –ü–û–ö–ê–ó–´–í–ê–ô!"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data="card_settings"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="profile"))
    bot.edit_message_media(chat_id=chat_id, message_id=edit_id, media=types.InputMediaPhoto(photos.PHOTOS['card'], caption=caption), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "card_settings")
def card_settings(call):
    caption = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É üõë", callback_data="block_card"))
    markup.add(types.InlineKeyboardButton("API –∫–∞—Ä—Ç—ã üîë", callback_data="api_card"))
    markup.add(types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è üìú", callback_data="card_history_user"))
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ üí∏", callback_data="transfer_money"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="card"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "transfer_money")
def transfer_money(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º —Å—É–º–º–∞"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="card_settings"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_transfer_money, call.message.message_id)

def process_transfer_money(message, message_id):
    text = message.text.split()
    if len(text) != 2 or not text[1].replace('.', '', 1).isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        card_settings(types.CallbackQuery(id=str(random.randint(1,10000)), from_user=message.from_user, message=message, data="card_settings"))
        return
    to_username = text[0]
    amount = float(text[1])
    from_user = get_user(message.chat.id)
    if amount > from_user['card_balance'] or amount <= 0:
        bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
        card_settings(types.CallbackQuery(id=str(random.randint(1,10000)), from_user=message.from_user, message=message, data="card_settings"))
        return
    cursor.execute("SELECT id FROM users WHERE username = ?", (to_username,))
    row = cursor.fetchone()
    if not row:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        card_settings(types.CallbackQuery(id=str(random.randint(1,10000)), from_user=message.from_user, message=message, data="card_settings"))
        return
    to_user_id = row[0]
    to_user = get_user(to_user_id)
    if to_user['card_status'] != 'active' and to_user_id != from_user['id']:
        bot.send_message(message.chat.id, "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã")
        card_settings(types.CallbackQuery(id=str(random.randint(1,10000)), from_user=message.from_user, message=message, data="card_settings"))
        return
    caption = f"–Æ–∑–µ—Ä–Ω–µ–π–º: {to_username}\n–°—É–º–º–∞: {amount}"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ ‚úÖ", callback_data=f"confirm_transfer_{to_user_id}_{amount}"))
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="card_settings"))
    bot.edit_message_caption(caption, message.chat.id, message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_transfer_"))
def confirm_transfer(call):
    parts = call.data.split("_")
    to_user_id = int(parts[2])
    amount = float(parts[3])
    from_user_id = call.from_user.id
    from_user = get_user(from_user_id)
    if amount > from_user['card_balance']:
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
        return
    to_user = get_user(to_user_id)
    update_user(from_user_id, card_balance=from_user['card_balance'] - amount)
    update_user(to_user_id, card_balance=to_user['card_balance'] + amount)
    cursor.execute("INSERT INTO card_history (user_id, amount, timestamp, type) VALUES (?, ?, ?, ?)", (from_user_id, -amount, datetime.now(tz), 'transfer_out'))
    cursor.execute("INSERT INTO card_history (user_id, amount, timestamp, type) VALUES (?, ?, ?, ?)", (to_user_id, amount, datetime.now(tz), 'transfer_in'))
    cursor.execute("INSERT INTO transfers (from_user_id, to_user_id, amount, timestamp) VALUES (?, ?, ?, ?)", (from_user_id, to_user_id, amount, datetime.now(tz)))
    conn.commit()
    # Send check photo
    check_caption = f"–Æ–∑–µ—Ä–Ω–µ–π–º: {to_user['username']}\n–°—É–º–º–∞: {amount}\n–î–∞—Ç–∞: {datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S')}"
    check_msg = bot.send_photo(call.message.chat.id, photos.PHOTOS['check'] if 'check' in photos.PHOTOS else photos.PHOTOS['start'], caption=check_caption)
    check_link = f"t.me/{bot.get_me().username}/{call.message.chat.id}/{check_msg.message_id}"  # Approximate link
    bot.send_message(call.message.chat.id, f"–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫: {check_link}")
    # Notify receiver
    notify_caption = f"–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n–Æ–∑–µ—Ä–Ω–µ–π–º: {from_user['username']}\n–°—É–º–º–∞: {amount}\n–î–∞—Ç–∞: {datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S')}"
    bot.send_message(to_user_id, notify_caption)
    bot.answer_callback_query(call.id, "–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")

@bot.callback_query_handler(func=lambda call: call.data == "card_history_user")
def card_history_user(call):
    user_id = call.from_user.id
    cursor.execute("SELECT amount, timestamp, type, id FROM card_history WHERE user_id = ? ORDER BY timestamp DESC", (user_id,))
    rows = cursor.fetchall()
    if not rows:
        caption = "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏"
    else:
        caption = "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:"
    markup = types.InlineKeyboardMarkup()
    for row in rows:
        if row[2] in ['deposit', 'transfer_in']:
            sign = '+'
        else:
            sign = '-'
        if row[2] == 'transfer_in':
            cursor.execute("SELECT from_user_id FROM transfers WHERE to_user_id=? AND amount=? AND timestamp=?", (user_id, row[0], row[1]))
            tr = cursor.fetchone()
            other = get_user(tr[0])['username'] if tr else ''
            text = f"{sign}{abs(row[0])} {row[1].strftime('%Y-%m-%d %H:%M')} –æ—Ç {other}"
        elif row[2] == 'transfer_out':
            cursor.execute("SELECT to_user_id FROM transfers WHERE from_user_id=? AND amount=? AND timestamp=?", (user_id, -row[0], row[1]))
            tr = cursor.fetchone()
            other = get_user(tr[0])['username'] if tr else ''
            text = f"{sign}{abs(row[0])} {row[1].strftime('%Y-%m-%d %H:%M')} –∫–æ–º—É {other}"
        else:
            text = f"{sign}{abs(row[0])} {row[1].strftime('%Y-%m-%d %H:%M')} {row[2]}"
        markup.add(types.InlineKeyboardButton(text, callback_data=f"dummy_history_{row[3]}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="card_settings"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("dummy_history_"))
def dummy_history(call):
    bot.answer_callback_query(call.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=False)

@bot.callback_query_handler(func=lambda call: call.data == "activate_card")
def activate_card(call):
    user = get_user(call.message.chat.id)
    if user['card_status'] != 'inactive':
        bot.answer_callback_query(call.id, "–ö–∞—Ä—Ç–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)
        return
    caption = "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –∏–∑ 4 —Ü–∏—Ñ—Ä"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="card"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, set_card_password, call.message.message_id)

def set_card_password(message, message_id):
    password = message.text
    if not password.isdigit() or len(password) != 4:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        show_card(types.CallbackQuery(id=str(random.randint(1,10000)), from_user=message.from_user, message=message, data="card"))
        return
    user_id = message.chat.id
    card_num = generate_card_number()
    cvv = generate_cvv()
    api_token = generate_api_token()
    update_user(user_id, card_number=card_num, cvv=cvv, card_status='active', card_password=password, card_activation_date=datetime.now(tz), api_token=api_token)
    display_card(user_id, message_id)

@bot.callback_query_handler(func=lambda call: call.data == "block_card")
def block_card(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="confirm_block_card"))
    markup.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="card_settings"))
    bot.edit_message_caption("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–∞—Ä—Ç—ã", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "confirm_block_card")
def confirm_block_card(call):
    user_id = call.from_user.id
    user = get_user(user_id)
    balance = user['card_balance']
    if balance > 0:
        cursor.execute("INSERT INTO card_history (user_id, amount, timestamp, type) VALUES (?, ?, ?, ?)", (user_id, -balance, datetime.now(tz), 'withdraw'))
        conn.commit()
    update_user(user_id, card_status='blocked', block_reason='user', card_balance=0, card_activation_date=datetime.now(tz))
    bot.edit_message_caption("–ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –±–∞–ª–∞–Ω—Å —Å–ø–∏—Å–∞–Ω", call.message.chat.id, call.message.message_id)
    show_card(call)

@bot.callback_query_handler(func=lambda call: call.data == "api_card")
def api_card(call):
    user = get_user(call.message.chat.id)
    api_token = user.get('api_token')  # Use .get to avoid KeyError
    caption = f"–≤–∞—à –∞–ø–∏ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã:\n<code>{api_token}</code>\n!–ù–ò–í–ö–û–ï–ú –°–õ–£–ß–ê–ï –ù–ò–ö–û–ú–£ –ï–ì–û –ù–ï –ü–û–ö–ê–ó–´–í–ê–ô!"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="card_settings"))
    bot.edit_message_caption(caption, call.message.chat.id, call.message.message_id, parse_mode="HTML", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("back_"))
def back(call):
    data = call.data
    if data == "back_main":
        show_main_menu(call.message.chat.id, call.message.message_id)
    elif data == "back_admin":
        admin_panel(types.SimpleNamespace(chat=types.SimpleNamespace(id=call.message.chat.id)))
        show_main_menu(call.message.chat.id, call.message.message_id)

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if not is_admin(message.chat.id):
        return
    caption = "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä üì±", callback_data="get_number"), types.InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ —Å–ª—ë—Ç–µ üõ©Ô∏è", callback_data="report_flight"))
    markup.row(types.InlineKeyboardButton("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚öôÔ∏è", callback_data="admin_extra"))
    bot.send_message(message.chat.id, caption, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "get_number")
def get_number(call):
    queue = sort_queue(get_queue())
    if not queue:
        bot.answer_callback_query(call.id, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", show_alert=True)
        return
    markup = types.InlineKeyboardMarkup()
    for item in queue:
        user = get_user(item['user_id'])
        sub = user['subscription_type'] or ""
        rep = user['reputation']
        button_text = f"{item['phone_number']} ({item['type']})-—Ä–µ–ø:{rep}-–ø–æ–¥–ø–∏—Å–∫–∞:{sub}"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f"select_number_{item['phone_number']}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_admin"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_number_"))
def select_number(call):
    phone = call.data.split("_")[2]
    cursor.execute("SELECT user_id, type FROM queue WHERE phone_number = ?", (phone,))
    row = cursor.fetchone()
    user_id = row[0]
    number_type = row[1]
    user = get_user(user_id)
    sub = user['subscription_type'] or ""
    price_hour, price_30 = get_price_increase(sub)
    rep = user['reputation']
    caption = f"–ù–æ–º–µ—Ä: {phone} ({number_type})\n–ü–æ–¥–ø–∏—Å–∫–∞: {sub}\n–ü—Ä–∞–π—Å: —á–∞—Å-{price_hour}$ 30–º–∏–Ω-{price_30}$\n–†–µ–ø—É—Ç–∞—Ü–∏—è: {rep}"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ üîë", callback_data=f"send_code_{phone}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="get_number"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("send_code_"))
def send_code(call):
    phone = call.data.split("_")[2]
    caption = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–æ—Ç–æ"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="select_number_" + phone))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_send_code, phone, call.from_user.id)

def process_send_code(message, phone, admin_id):
    cursor.execute("SELECT user_id, type FROM queue WHERE phone_number = ?", (phone,))
    row = cursor.fetchone()
    user_id = row[0]
    number_type = row[1]
    caption_base = f"‚úÜ {phone} –ó–ê–ü–†–û–° –ê–ö–¢–ò–í–ê–¶–ò–ò\n‚úé –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: 2 –º–∏–Ω—É—Ç—ã"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í–≤—ë–ª ‚úÖ", callback_data=f"entered_{phone}"))
    markup.add(types.InlineKeyboardButton("–°–∫–∏–ø ‚ùå", callback_data=f"skip_{phone}"))
    if message.photo:
        caption = caption_base + "\n‚úî –¢–í–û–ô –ö–û–î: (–Ω–∞ —Ñ–æ—Ç–æ)"
        sent = bot.send_photo(user_id, message.photo[-1].file_id, caption=caption, reply_markup=markup)
    else:
        code = message.text
        caption = caption_base + f"\n‚úî –¢–í–û–ô –ö–û–î: {code}"
        sent = bot.send_message(user_id, caption, reply_markup=markup)
    bot.send_message(message.chat.id, "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    cursor.execute("DELETE FROM queue WHERE phone_number = ?", (phone,))
    conn.commit()
    pending_activations[phone] = admin_id
    # Timer to delete after 2 min if not responded
    def delete_msg():
        try:
            bot.delete_message(user_id, sent.message_id)
            bot.send_message(user_id, f"‚úé {phone} –í—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ù–æ–º–µ—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
            pending_activations.pop(phone, None)
            pending_timers.pop(phone, None)
        except:
            pass
    timer = threading.Timer(120, delete_msg)
    pending_timers[phone] = timer
    timer.start()

@bot.callback_query_handler(func=lambda call: call.data.startswith("entered_"))
def entered(call):
    phone = call.data.split("_")[1]
    user_id = call.from_user.id
    admin_id = pending_activations.pop(phone, None)
    if admin_id is None:
        bot.answer_callback_query(call.id, "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    if phone in pending_timers:
        pending_timers[phone].cancel()
        del pending_timers[phone]
    cursor.execute("SELECT type FROM queue WHERE phone_number = ?", (phone,))
    row = cursor.fetchone()
    number_type = row[0] if row else 'unknown'
    cursor.execute("INSERT INTO working (user_id, phone_number, start_time, admin_id, type) VALUES (?, ?, ?, ?, ?)", (user_id, phone, datetime.now(tz), admin_id, number_type))
    conn.commit()
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['entered'], caption="–ù–æ–º–µ—Ä –≤ —Ä–∞–±–æ—Ç–µ"))
    log_action(user_id, f"–í–≤—ë–ª –∫–æ–¥ –¥–ª—è {phone}")
    # Notify admin
    bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –∫–æ–¥ –¥–ª—è {phone}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("skip_"))
def skip(call):
    phone = call.data.split("_")[1]
    admin_id = pending_activations.pop(phone, None)
    if admin_id is None:
        bot.answer_callback_query(call.id, "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    if phone in pending_timers:
        pending_timers[phone].cancel()
        del pending_timers[phone]
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id, media=types.InputMediaPhoto(photos.PHOTOS['skip'], caption="–ù–æ–º–µ—Ä —Å–∫–∏–ø–Ω—É—Ç"))
    log_action(call.from_user.id, f"–°–∫–∏–ø {phone}")
    # Notify admin
    bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} —Å–∫–∏–ø–Ω—É–ª {phone}")

@bot.callback_query_handler(func=lambda call: call.data == "report_flight")
def report_flight(call):
    working = sorted(get_working(), key=lambda x: get_user(x['user_id'])['reputation'], reverse=True)
    if not working:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ", show_alert=True)
        return
    markup = types.InlineKeyboardMarkup()
    for item in working:
        user = get_user(item['user_id'])
        button_text = f"{item['phone_number']} ({item['type']})-—Ä–µ–ø:{user['reputation']}"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f"flight_number_{item['phone_number']}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_admin"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Å–ª—ë—Ç–∞", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("flight_number_"))
def flight_number(call):
    phone = call.data.split("_")[2]
    caption = "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–ª—ë—Ç–∞ (–ß–ß:–ú–ú)"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="report_flight"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_flight_time, phone)

def process_flight_time(message, phone):
    flight_str = message.text
    try:
        flight_time = datetime.strptime(flight_str, "%H:%M")
        flight_time = datetime.now(tz).replace(hour=flight_time.hour, minute=flight_time.minute)
    except:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    cursor.execute("SELECT user_id, start_time, type FROM working WHERE phone_number = ?", (phone,))
    row = cursor.fetchone()
    user_id = row[0]
    accept_time = row[1]
    number_type = row[2]
    hold = calculate_hold(accept_time, flight_time)
    caption = f"{phone} ({number_type}) —Å–ª–µ—Ç–µ–ª\n—Ö–æ–ª–¥: {hold}"
    markup = types.InlineKeyboardMarkup()
    if hold:
        markup.add(types.InlineKeyboardButton("–°–ª—ë—Ç üü¢", callback_data=f"success_flight_{phone}_{flight_time.timestamp()}_{number_type}"))
    markup.add(types.InlineKeyboardButton("–ë–ª–æ–∫ üõë", callback_data=f"block_flight_{phone}_{number_type}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="flight_number_" + phone))
    bot.send_message(message.chat.id, caption, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("success_flight_"))
def success_flight(call):
    parts = call.data.split("_")
    phone = parts[2]
    ts = float(parts[3])
    number_type = parts[4]
    flight_time = datetime.fromtimestamp(ts, pytz.UTC).astimezone(tz)
    cursor.execute("SELECT user_id, start_time FROM working WHERE phone_number = ?", (phone,))
    row = cursor.fetchone()
    user_id = row[0]
    accept_time = row[1]
    hold = calculate_hold(accept_time, flight_time)
    if hold:
        cursor.execute("INSERT INTO successful (user_id, phone_number, hold_time, acceptance_time, flight_time, type) VALUES (?, ?, ?, ?, ?, ?)", (user_id, phone, hold, accept_time, flight_time, number_type))
        conn.commit()
        bot.send_photo(user_id, photos.PHOTOS['success'], caption=f"{phone} —Å–ª–µ—Ç–µ–ª | üü¢—É—Å–ø–µ—Öüü¢\nüóíÔ∏è–Ω–æ–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –£—Å–ø–µ—à–Ω—ã–µ\nüÜô–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /hold —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ö–æ–ª–¥")
    cursor.execute("DELETE FROM working WHERE phone_number = ?", (phone,))
    conn.commit()
    bot.answer_callback_query(call.id, "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

@bot.callback_query_handler(func=lambda call: call.data.startswith("block_flight_"))
def block_flight(call):
    parts = call.data.split("_")
    phone = parts[2]
    number_type = parts[3]
    cursor.execute("SELECT user_id FROM working WHERE phone_number = ?", (phone,))
    row = cursor.fetchone()
    user_id = row[0]
    cursor.execute("INSERT INTO blocked (user_id, phone_number, type) VALUES (?, ?, ?)", (user_id, phone, number_type))
    conn.commit()
    cursor.execute("DELETE FROM working WHERE phone_number = ?", (phone,))
    conn.commit()
    bot.send_photo(user_id, photos.PHOTOS['block'], caption=f"{phone} –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω | üõë–±–ª–æ–∫üõë\nüóíÔ∏è–Ω–æ–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –ë–ª–æ–∫\nüÜô–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /hold —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ö–æ–ª–¥")
    bot.answer_callback_query(call.id, "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

@bot.callback_query_handler(func=lambda call: call.data == "admin_extra")
def admin_extra(call):
    caption = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞ üì¢", callback_data="broadcast"), types.InlineKeyboardButton("–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ üîî", callback_data="reminder"))
    markup.add(types.InlineKeyboardButton("–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å üí∞", callback_data="give_balance"), types.InlineKeyboardButton("–í—ã–¥–∞—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é ‚≠ê", callback_data="give_rep"))
    markup.add(types.InlineKeyboardButton("–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üéÅ", callback_data="give_sub"), types.InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π üìã", callback_data="subs_users"))
    markup.add(types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üóëÔ∏è", callback_data="clear_stats"), types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å üóëÔ∏è", callback_data="clear_queue"))
    markup.add(types.InlineKeyboardButton("–û—Ç—á—ë—Ç üìÑ", callback_data="report"), types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å ‚öôÔ∏è", callback_data="change_status"))
    markup.add(types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π üõ†Ô∏è", callback_data="manage_sub"), types.InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚öôÔ∏è", callback_data="bot_settings"))
    markup.add(types.InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üîó", callback_data="admin_referral"), types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∞–º–∏ üí≥", callback_data="manage_cards"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_admin"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "broadcast")
def broadcast(call):
    caption = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û–±—ã—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="normal_broadcast"))
    markup.add(types.InlineKeyboardButton("–ú–µ–≥–∞ —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="mega_broadcast"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="admin_extra"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "normal_broadcast")
def normal_broadcast(call):
    caption = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="broadcast"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_broadcast)

def process_broadcast(message):
    cursor.execute("SELECT id FROM users")
    users = cursor.fetchall()
    for u in users:
        try:
            if message.photo:
                bot.send_photo(u[0], message.photo[-1].file_id, caption=message.caption)
            elif message.sticker:
                bot.send_sticker(u[0], message.sticker.file_id)
            elif message.video:
                bot.send_video(u[0], message.video.file_id, caption=message.caption)
            elif message.animation:
                bot.send_animation(u[0], message.animation.file_id, caption=message.caption)
            elif message.document:
                bot.send_document(u[0], message.document.file_id, caption=message.caption)
            elif message.audio:
                bot.send_audio(u[0], message.audio.file_id, caption=message.caption)
            else:
                bot.send_message(u[0], message.text)
        except:
            pass
    bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    log_admin_action(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞")

@bot.callback_query_handler(func=lambda call: call.data == "mega_broadcast")
def mega_broadcast(call):
    caption = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("1", callback_data="layout_1"))
    markup.add(types.InlineKeyboardButton("2", callback_data="layout_2"))
    markup.add(types.InlineKeyboardButton("3", callback_data="layout_3"))
    markup.add(types.InlineKeyboardButton("4", callback_data="layout_4"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="broadcast"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("layout_"))
def select_layout(call):
    global mega_layout
    mega_layout = int(call.data.split("_")[1])
    caption = "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫:\n–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å—Å—ã–ª–∫–∞\n..."
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="mega_broadcast"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_mega_buttons)

def process_mega_buttons(message):
    global mega_buttons, mega_layout
    lines = message.text.split('\n')
    if len(lines) > 10:
        bot.send_message(message.chat.id, "–ú–∞–∫—Å–∏–º—É–º 10 –∫–Ω–æ–ø–æ–∫")
        return
    mega_buttons = []
    for line in lines:
        parts = line.split()
        if len(parts) < 2:
            continue
        name = ' '.join(parts[:-1])
        url = parts[-1]
        mega_buttons.append(types.InlineKeyboardButton(name, url=url))
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_mega_content"))
    bot.send_message(message.chat.id, "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(message.chat.id, process_mega_content)

def process_mega_content(message):
    global mega_content
    mega_content = message
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_mega"))
    bot.send_message(message.chat.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "skip_mega_content")
def skip_mega_content(call):
    global mega_content
    mega_content = None
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_mega"))
    bot.send_message(call.message.chat.id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–Ω–æ–ø–æ–∫ –±–µ–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "confirm_mega")
def confirm_mega(call):
    global mega_buttons, mega_layout, mega_content
    if not mega_buttons:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∫–Ω–æ–ø–æ–∫", show_alert=True)
        return

    # Build markup based on layout
    markup = types.InlineKeyboardMarkup()
    if mega_layout == 1:
        # –ü–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(mega_buttons), 2):
            row = mega_buttons[i:i+2]
            markup.row(*row)
    elif mega_layout == 2:
        # –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ 2,1,2,1,...
        idx = 0
        widths = [2, 1]
        w_idx = 0
        while idx < len(mega_buttons):
            width = widths[w_idx % len(widths)]
            row = mega_buttons[idx:idx+width]
            if row:
                markup.row(*row)
            idx += width
            w_idx += 1
    elif mega_layout == 3:
        # –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ 1,2,1,2,...
        idx = 0
        widths = [1, 2]
        w_idx = 0
        while idx < len(mega_buttons):
            width = widths[w_idx % len(widths)]
            row = mega_buttons[idx:idx+width]
            if row:
                markup.row(*row)
            idx += width
            w_idx += 1
    elif mega_layout == 4:
        # –ü–æ 1 –≤ —Ä—è–¥
        for btn in mega_buttons:
            markup.row(btn)

    cursor.execute("SELECT id FROM users")
    users = cursor.fetchall()
    for u in users:
        try:
            if mega_content is None:
                bot.send_message(u[0], "–†–∞—Å—Å—ã–ª–∫–∞", reply_markup=markup)
            elif mega_content.photo:
                bot.send_photo(u[0], mega_content.photo[-1].file_id, caption=mega_content.caption, reply_markup=markup)
            elif mega_content.video:
                bot.send_video(u[0], mega_content.video.file_id, caption=mega_content.caption, reply_markup=markup)
            elif mega_content.text:
                bot.send_message(u[0], mega_content.text, reply_markup=markup)
            # Add other types if needed
        except:
            pass
    bot.send_message(call.message.chat.id, "–ú–µ–≥–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    mega_buttons = []
    mega_layout = None
    mega_content = None

@bot.callback_query_handler(func=lambda call: call.data == "reminder")
def reminder(call):
    queue = sort_queue(get_queue())[:5]
    for i, item in enumerate(queue, 1):
        bot.send_message(item['user_id'], f"üì¢ –°–ö–û–†–û –ê–ö–¢–ò–í–ê–¶–ò–Ø –¢–í–û–ï–ì–û –ù–û–ú–ï–†–ê\nüó£Ô∏è‚ö†Ô∏è –ù–û–ú–ï–†: {item['phone_number']} ({item['type']}) ({i} –≤ –æ—á–µ—Ä–µ–¥–∏)")
    bot.answer_callback_query(call.id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    log_admin_action(call.from_user.id, "–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞")

@bot.callback_query_handler(func=lambda call: call.data == "clear_stats")
def clear_stats(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (098890)"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="admin_extra"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_clear_stats)

def process_clear_stats(message):
    if message.text != "098890":
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        return
    cursor.execute("DELETE FROM successful")
    conn.commit()
    bot.send_message(message.chat.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞")
    log_admin_action(message.chat.id, "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@bot.callback_query_handler(func=lambda call: call.data == "clear_queue")
def clear_queue(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (098890)"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="admin_extra"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_clear_queue)

def process_clear_queue(message):
    if message.text != "098890":
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        return
    cursor.execute("DELETE FROM queue")
    conn.commit()
    bot.send_message(message.chat.id, "–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞")
    log_admin_action(message.chat.id, "–û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏")

@bot.callback_query_handler(func=lambda call: call.data == "report")
def report(call):
    stats = get_successful()
    text = "\n".join(f"{get_user(item['user_id'])['username']}-{item['phone_number']} ({item['type']})-—Ö–æ–ª–¥: {item['hold_time']}" for item in stats if item['hold_time'])
    if not text:
        text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    with open("report.txt", "w") as f:
        f.write(text)
    bot.send_document(call.message.chat.id, open("report.txt", "rb"))
    log_admin_action(call.from_user.id, "–û—Ç—á—ë—Ç")

@bot.callback_query_handler(func=lambda call: call.data == "change_status")
def change_status(call):
    caption = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("Full work üü¢", callback_data="set_status_Full work üü¢"))
    markup.add(types.InlineKeyboardButton("Stop work üõë", callback_data="set_status_Stop work üõë"))
    markup.add(types.InlineKeyboardButton("Pause ‚è∏Ô∏è", callback_data="set_status_Pause ‚è∏Ô∏è"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="admin_extra"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("set_status_"))
def set_status_call(call):
    status = call.data.split("_")[2]
    set_status('work_status', status)
    bot.answer_callback_query(call.id, "–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω")
    log_admin_action(call.from_user.id, f"–ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –Ω–∞ {status}")

@bot.callback_query_handler(func=lambda call: call.data == "give_rep")
def give_rep(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—è —é–∑–µ—Ä–Ω–µ–π–º"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="admin_extra"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_give_rep)

def process_give_rep(message):
    parts = message.text.split()
    if len(parts) != 2 or not parts[0].replace('.', '', 1).isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    rep = float(parts[0])
    username = parts[1].lstrip('@')
    cursor.execute("SELECT id FROM users WHERE username = ?", (username,))
    row = cursor.fetchone()
    if not row:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    user_id = row[0]
    update_user(user_id, reputation=rep)
    bot.send_message(message.chat.id, "–†–µ–ø—É—Ç–∞—Ü–∏—è –≤—ã–¥–∞–Ω–∞")
    log_admin_action(message.chat.id, f"–í—ã–¥–∞–ª —Ä–µ–ø—É—Ç–∞—Ü–∏—é {rep} {username}")

@bot.callback_query_handler(func=lambda call: call.data == "give_balance")
def give_balance(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º–∞ —é–∑–µ—Ä–Ω–µ–π–º"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="admin_extra"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_give_balance)

def process_give_balance(message):
    parts = message.text.split()
    if len(parts) != 2 or not parts[0].replace('.', '', 1).isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    amount = float(parts[0])
    username = parts[1].lstrip('@')
    cursor.execute("SELECT id FROM users WHERE username = ?", (username,))
    row = cursor.fetchone()
    if not row:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    user_id = row[0]
    update_user(user_id, balance=amount)
    bot.send_message(message.chat.id, "–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω")
    log_admin_action(message.chat.id, f"–ü–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å {amount} {username}")

@bot.callback_query_handler(func=lambda call: call.data == "subs_users")
def subs_users(call):
    cursor.execute("SELECT username FROM users WHERE subscription_type IS NOT NULL")
    users = cursor.fetchall()
    text = "\n".join(u[0] for u in users)
    bot.send_message(call.message.chat.id, text or "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π")
    log_admin_action(call.from_user.id, "–ü—Ä–æ–≤–µ—Ä–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π")

@bot.callback_query_handler(func=lambda call: call.data == "give_sub")
def give_sub(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–¥–ø–∏—Å–∫–∞ –º–µ—Å—è—Ü—ã"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="admin_extra"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_give_sub)

def process_give_sub(message):
    parts = message.text.split()
    if len(parts) < 3 or not parts[-1].isdigit() or int(parts[-1]) not in range(1,13):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    username = parts[0].lstrip('@')
    sub_type = ' '.join(parts[1:-1])
    months = int(parts[-1])
    if sub_type not in config.SUBSCRIPTIONS:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
        return
    cursor.execute("SELECT id FROM users WHERE username = ?", (username,))
    row = cursor.fetchone()
    if not row:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    user_id = row[0]
    end = datetime.now(tz) + timedelta(days=30*months)
    update_user(user_id, subscription_type=sub_type, subscription_end=end)
    bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞")
    log_admin_action(message.chat.id, f"–í—ã–¥–∞–ª –ø–æ–¥–ø–∏—Å–∫—É {sub_type} –Ω–∞ {months} –º–µ—Å {username}")

@bot.callback_query_handler(func=lambda call: call.data == "manage_sub")
def manage_sub(call):
    caption = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: –∏–∑–º–µ–Ω–∏—Ç—å_—Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∞ —Ü–µ–Ω–∞, –∏–∑–º–µ–Ω–∏—Ç—å_–æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç –∏ —Ç.–¥."
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="admin_extra"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_manage_sub)

def process_manage_sub(message):
    # Placeholder
    bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (placeholder)")
    log_admin_action(message.chat.id, f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π: {message.text}")

@bot.callback_query_handler(func=lambda call: call.data == "bot_settings")
def bot_settings(call):
    caption = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ ‚ûï", callback_data="add_admin"))
    markup.add(types.InlineKeyboardButton("–£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞ ‚ûñ", callback_data="remove_admin"))
    markup.add(types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ üìã", callback_data="list_admins"))
    markup.add(types.InlineKeyboardButton("–õ–æ–≥ –∞–¥–º–∏–Ω–æ–≤ üìù", callback_data="admin_logs_file"))
    markup.add(types.InlineKeyboardButton("All log üìù", callback_data="all_logs"))
    markup.add(types.InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–µ—Ç–∞ ‚öôÔ∏è", callback_data="flight_settings"))
    markup.add(types.InlineKeyboardButton("–õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìù", callback_data="user_logs"))
    markup.add(types.InlineKeyboardButton("–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç üìá", callback_data="cards_data"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="admin_extra"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "add_admin")
def add_admin(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="bot_settings"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_add_admin)

def process_add_admin(message):
    try:
        admin_id = int(message.text)
        cursor.execute("INSERT OR IGNORE INTO admins (id) VALUES (?)", (admin_id,))
        conn.commit()
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω")
        log_admin_action(message.chat.id, f"–î–æ–±–∞–≤–∏–ª –∞–¥–º–∏–Ω–∞ {admin_id}")
    except:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID")

@bot.callback_query_handler(func=lambda call: call.data == "remove_admin")
def remove_admin(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="bot_settings"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_remove_admin)

def process_remove_admin(message):
    try:
        admin_id = int(message.text)
        cursor.execute("DELETE FROM admins WHERE id = ?", (admin_id,))
        conn.commit()
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω")
        log_admin_action(message.chat.id, f"–£–¥–∞–ª–∏–ª –∞–¥–º–∏–Ω–∞ {admin_id}")
    except:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID")

@bot.callback_query_handler(func=lambda call: call.data == "list_admins")
def list_admins(call):
    cursor.execute("SELECT id FROM admins")
    admins = cursor.fetchall()
    text = "\n".join(get_user(a[0])['username'] for a in admins if get_user(a[0]))
    with open("admins.txt", "w") as f:
        f.write(text)
    bot.send_document(call.message.chat.id, open("admins.txt", "rb"))
    log_admin_action(call.from_user.id, "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")

@bot.callback_query_handler(func=lambda call: call.data == "admin_logs_file")
def admin_logs_file(call):
    cursor.execute("SELECT * FROM admin_logs")
    rows = cursor.fetchall()
    with open("admin_logs.csv", "w", newline='') as f:
        writer = csv.writer(f)
        writer.writerow(['id', 'admin_id', 'action', 'timestamp'])
        writer.writerows(rows)
    bot.send_document(call.message.chat.id, open("admin_logs.csv", "rb"))
    log_admin_action(call.from_user.id, "–õ–æ–≥ –∞–¥–º–∏–Ω–æ–≤")

@bot.callback_query_handler(func=lambda call: call.data == "all_logs")
def all_logs(call):
    cursor.execute("SELECT * FROM logs")
    rows = cursor.fetchall()
    with open("all_logs.csv", "w", newline='') as f:
        writer = csv.writer(f)
        writer.writerow(['id', 'user_id', 'action', 'timestamp'])
        writer.writerows(rows)
    bot.send_document(call.message.chat.id, open("all_logs.csv", "rb"))
    log_admin_action(call.from_user.id, "All log")

@bot.callback_query_handler(func=lambda call: call.data == "flight_settings")
def flight_settings(call):
    caption = f"–¢–µ–∫—É—â–∏–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ö–æ–ª–¥ –¥–ª—è –≤—ã–ø–ª–∞—Ç: {MIN_HOLD_MINUTES} –º–∏–Ω—É—Ç\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="bot_settings"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_flight_settings)

def process_flight_settings(message):
    global MIN_HOLD_MINUTES
    try:
        new_min = int(message.text)
        if new_min > 0:
            MIN_HOLD_MINUTES = new_min
            try:
                config.MIN_HOLD_MINUTES = new_min
            except Exception:
                pass
            bot.send_message(message.chat.id, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ö–æ–ª–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_min} –º–∏–Ω—É—Ç")
            log_admin_action(message.chat.id, f"–ò–∑–º–µ–Ω–µ–Ω –º–∏–Ω —Ö–æ–ª–¥ –Ω–∞ {new_min}")
        else:
            bot.send_message(message.chat.id, "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    except:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

@bot.callback_query_handler(func=lambda call: call.data == "user_logs")
def user_logs(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="bot_settings"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_user_logs)

def process_user_logs(message):
    username = message.text.lstrip('@')
    cursor.execute("SELECT id FROM users WHERE username = ?", (username,))
    row = cursor.fetchone()
    if not row:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    user_id = row[0]
    cursor.execute("SELECT * FROM logs WHERE user_id = ?", (user_id,))
    rows = cursor.fetchall()
    with open(f"{username}_logs.csv", "w", newline='') as f:
        writer = csv.writer(f)
        writer.writerow(['id', 'user_id', 'action', 'timestamp'])
        writer.writerows(rows)
    bot.send_document(message.chat.id, open(f"{username}_logs.csv", "rb"))
    log_admin_action(message.chat.id, f"–õ–æ–≥–∏ {username}")

@bot.callback_query_handler(func=lambda call: call.data == "cards_data")
def cards_data(call):
    cursor.execute("SELECT username, card_number, cvv, api_token, card_password, card_balance, card_status FROM users WHERE card_number IS NOT NULL")
    rows = cursor.fetchall()
    text = ""
    for row in rows:
        text += f"–Æ–∑–µ—Ä–Ω–µ–π–º- {row[0]}\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã- {row[1]}\nCvv –∫–æ–¥- {row[2]}\n–ê–ø–∏ —Ç–æ–∫–µ–Ω- {row[3]}\n–ü–∞—Ä–æ–ª—å- {row[4]}\n–ë–∞–ª–∞–Ω—Å- {row[5]}\n–°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç—ã- {row[6]}\n\n"
    if not text:
        text = "–ù–µ—Ç –∫–∞—Ä—Ç"
    with open("cards_data.txt", "w") as f:
        f.write(text)
    bot.send_document(call.message.chat.id, open("cards_data.txt", "rb"))
    log_admin_action(call.from_user.id, "–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç")

@bot.callback_query_handler(func=lambda call: call.data == "admin_referral")
def admin_referral(call):
    caption = "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–û—Ç—á–µ—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º üìÑ", callback_data="ref_report"))
    markup.add(types.InlineKeyboardButton("–ó–∞—è–≤–∫–∏ üìã", callback_data="ref_requests"))
    markup.add(types.InlineKeyboardButton("–í—ã–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏—Ç üéÅ", callback_data="give_profit"))
    markup.add(types.InlineKeyboardButton("–í—ã–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ‚ûï", callback_data="give_refs"))
    markup.add(types.InlineKeyboardButton("–û—Ç—á–µ—Ç –ø–æ –≤—ã–ø–ª–∞—Ç–∞–º üìÑ", callback_data="payout_report"))
    markup.add(types.InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏ ‚öôÔ∏è", callback_data="ref_settings"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="admin_extra"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "ref_report")
def ref_report(call):
    cursor.execute("SELECT username, balance, referrals_count, profit_level FROM users")
    rows = cursor.fetchall()
    text = "\n".join(f"‚ñ∂{r[0]}-\n‚ñ∂–ë–∞–ª–∞–Ω—Å- {r[1]}\n‚ñ∂–†–µ—Ñ–µ—Ä–∞–ª—ã- {r[2]}\n‚ñ∂–ü—Ä–æ—Ñ–∏—Ç- {r[3]}" for r in rows)
    with open("ref_report.txt", "w") as f:
        f.write(text)
    bot.send_document(call.message.chat.id, open("ref_report.txt", "rb"))
    log_admin_action(call.from_user.id, "–û—Ç—á–µ—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º")

@bot.callback_query_handler(func=lambda call: call.data == "ref_requests")
def ref_requests(call):
    cursor.execute("SELECT * FROM withdraw_requests WHERE status = 'pending'")
    requests = cursor.fetchall()
    if not requests:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∑–∞—è–≤–æ–∫")
        return
    markup = types.InlineKeyboardMarkup()
    for req in requests:
        user = get_user(req[1])
        button_text = f"–ó–∞—è–≤–∫–∞ {req[0]} –æ—Ç {user['username']}"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f"view_req_{req[0]}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="admin_referral"))
    bot.edit_message_text("–ó–∞—è–≤–∫–∏", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_req_"))
def view_req(call):
    req_id = int(call.data.split("_")[2])
    cursor.execute("SELECT * FROM withdraw_requests WHERE id = ?", (req_id,))
    req = cursor.fetchone()
    user = get_user(req[1])
    caption = f"–Æ–∑–µ—Ä–Ω–µ–π–º: {user['username']}\n–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç–∞: {req[2]}\n–ü—Ä–æ—Ñ–∏—Ç: {user['profit_level']}\n–†–µ—Ñ–µ—Ä–∞–ª—ã: {user['referrals_count']}"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É ‚ùå", callback_data=f"close_req_{req_id}"))
    markup.add(types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω–æ ‚úÖ", callback_data=f"paid_req_{req_id}"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="ref_requests"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("close_req_"))
def close_req(call):
    req_id = int(call.data.split("_")[2])
    cursor.execute("UPDATE withdraw_requests SET status = 'closed' WHERE id = ?", (req_id,))
    conn.commit()
    bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    log_admin_action(call.from_user.id, f"–ó–∞–∫—Ä—ã–ª –∑–∞—è–≤–∫—É {req_id}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("paid_req_"))
def paid_req(call):
    req_id = int(call.data.split("_")[2])
    cursor.execute("SELECT user_id, amount FROM withdraw_requests WHERE id = ?", (req_id,))
    req = cursor.fetchone()
    update_user(req[0], balance = get_user(req[0])['balance'] - req[1])
    cursor.execute("UPDATE withdraw_requests SET status = 'paid' WHERE id = ?", (req_id,))
    conn.commit()
    bot.send_message(req[0], "–í—ã–ø–ª–∞—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úîÔ∏è")
    bot.answer_callback_query(call.id, "–û–ø–ª–∞—á–µ–Ω–æ")
    log_admin_action(call.from_user.id, f"–û–ø–ª–∞—á–µ–Ω–æ –∑–∞—è–≤–∫–∞ {req_id}")

@bot.callback_query_handler(func=lambda call: call.data == "give_profit")
def give_profit(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø—Ä–æ—Ñ–∏—Ç"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="admin_referral"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_give_profit)

def process_give_profit(message):
    parts = message.text.split()
    if len(parts) < 2:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    username = parts[0].lstrip('@')
    profit = ' '.join(parts[1:])
    cursor.execute("SELECT id FROM users WHERE username = ?", (username,))
    row = cursor.fetchone()
    if not row:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    user_id = row[0]
    update_user(user_id, profit_level=profit)
    bot.send_message(message.chat.id, "–ü—Ä–æ—Ñ–∏—Ç –≤—ã–¥–∞–Ω")
    log_admin_action(message.chat.id, f"–í—ã–¥–∞–ª –ø—Ä–æ—Ñ–∏—Ç {profit} {username}")

@bot.callback_query_handler(func=lambda call: call.data == "give_refs")
def give_refs(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º —Ä–µ—Ñ–µ—Ä–∞–ª—ã"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="admin_referral"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_give_refs)

def process_give_refs(message):
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    username = parts[0].lstrip('@')
    refs = int(parts[1])
    cursor.execute("SELECT id FROM users WHERE username = ?", (username,))
    row = cursor.fetchone()
    if not row:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    user_id = row[0]
    update_user(user_id, referrals_count=refs)
    profit = get_profit_level(refs, is_admin=is_admin(user_id))
    update_user(user_id, profit_level=profit)
    bot.send_message(message.chat.id, "–†–µ—Ñ–µ—Ä–∞–ª—ã –≤—ã–¥–∞–Ω—ã")
    log_admin_action(message.chat.id, f"–í—ã–¥–∞–ª —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ {refs} {username}")

@bot.callback_query_handler(func=lambda call: call.data == "payout_report")
def payout_report(call):
    cursor.execute("SELECT * FROM withdraw_requests WHERE status = 'paid'")
    rows = cursor.fetchall()
    text = ""
    for r in rows:
        user = get_user(r[1])
        text += f"‚ñ∂ –Æ–∑–µ—Ä–Ω–µ–π–º: {user['username']}\n‚ñ∂ –î–∞—Ç–∞: {datetime.now(tz)}\n‚ñ∂ –°—É–º–º–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É: {r[2]}\n‚ñ∂ –°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã: {r[2]}\n‚ñ∂ –†–µ—Ñ–µ—Ä–∞–ª—ã: {user['referrals_count']}\n‚ñ∂ –ü—Ä–æ—Ñ–∏—Ç: {user['profit_level']}\n‚ïì –∞–¥–º–∏–Ω: {get_user(call.from_user.id)['username']}\n‚ïë \n‚ïö –≤—Ä–µ–º—è: {datetime.now(tz).strftime('%H:%M:%S')}\n\n"
    with open("payout_report.txt", "w") as f:
        f.write(text)
    bot.send_document(call.message.chat.id, open("payout_report.txt", "rb"))
    log_admin_action(call.from_user.id, "–û—Ç—á–µ—Ç –ø–æ –≤—ã–ø–ª–∞—Ç–∞–º")

@bot.callback_query_handler(func=lambda call: call.data == "ref_settings")
def ref_settings(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="admin_referral"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_ref_settings)

def process_ref_settings(message):
    try:
        new_price = float(message.text)
        config.REFERRAL_REWARD = new_price
        bot.send_message(message.chat.id, "–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞")
        log_admin_action(message.chat.id, f"–ò–∑–º–µ–Ω–µ–Ω–∞ —Ü–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏ –Ω–∞ {new_price}")
    except:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

@bot.callback_query_handler(func=lambda call: call.data == "manage_cards")
def manage_cards(call):
    caption = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∞–º–∏"
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É üõë", callback_data="block_card_admin"))
    markup.add(types.InlineKeyboardButton("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É üîì", callback_data="unblock_card_admin"))
    markup.add(types.InlineKeyboardButton("–ù–∞—á–∏—Å–ª–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É üí∞", callback_data="payout_cards"))
    markup.add(types.InlineKeyboardButton("–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å üí∏", callback_data="give_card_balance"))
    markup.add(types.InlineKeyboardButton("–°–ø–∏—Å–∞—Ç—å –±–∞–ª–∞–Ω—Å ‚ùå", callback_data="deduct_card_balance"))
    markup.add(types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ üìú", callback_data="card_history"))
    markup.add(types.InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∫–∞—Ä—Ç–æ–π üìã", callback_data="users_with_card"))
    markup.add(types.InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã üõë", callback_data="blocked_cards"))
    markup.add(types.InlineKeyboardButton("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∫–∞—Ä—Ç—ã üîì", callback_data="unblocked_cards"))
    markup.add(types.InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã üõë", callback_data="block_all_cards"))
    markup.add(types.InlineKeyboardButton("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã üîì", callback_data="unblock_all_cards"))
    markup.add(types.InlineKeyboardButton("–û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º üìÑ", callback_data="users_report"))
    markup.add(types.InlineKeyboardButton("–ù–∞—á–∏—Å–ª–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É üí∞", callback_data="payout_cards"))
    markup.add(types.InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã üîç", callback_data="view_transfers"))
    markup.add(types.InlineKeyboardButton("–±–¥", callback_data="card_db"))
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="admin_extra"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "view_transfers")
def view_transfers(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="manage_cards"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_view_transfers)

def process_view_transfers(message):
    username = message.text.lstrip('@')
    cursor.execute("SELECT id FROM users WHERE username = ?", (username,))
    row = cursor.fetchone()
    if not row:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    user_id = row[0]
    cursor.execute("SELECT from_user_id, to_user_id, amount, timestamp FROM transfers WHERE from_user_id = ? OR to_user_id = ?", (user_id, user_id))
    rows = cursor.fetchall()
    if not rows:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
        return
    text = ""
    for row in rows:
        from_username = get_user(row[0])['username']
        to_username = get_user(row[1])['username']
        direction = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if row[0] == user_id else "–ü–æ–ª—É—á–µ–Ω–æ"
        text += f"{direction} {row[2]} –æ—Ç @{from_username} –∫ @{to_username} {row[3]}\n"
    bot.send_message(message.chat.id, text)
    log_admin_action(message.chat.id, f"–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {username}")

@bot.callback_query_handler(func=lambda call: call.data == "card_db")
def card_db(call):
    cursor.execute("SELECT username, card_number, cvv, card_password, card_activation_date FROM users WHERE card_number IS NOT NULL")
    rows = cursor.fetchall()
    text = ""
    for row in rows:
        text += f"{row[0]}\n{row[1]}\n{row[2]}\n{row[3]}\n{row[4]}\n\n"
    if not text:
        text = "–ù–µ—Ç –∫–∞—Ä—Ç"
    with open("cards_db.txt", "w") as f:
        f.write(text)
    bot.send_document(call.message.chat.id, open("cards_db.txt", "rb"))
    log_admin_action(call.from_user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä –±–¥ –∫–∞—Ä—Ç")

@bot.callback_query_handler(func=lambda call: call.data == "block_card_admin")
def block_card_admin(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="manage_cards"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_block_card_admin)

def process_block_card_admin(message):
    username = message.text.lstrip('@')
    cursor.execute("SELECT id FROM users WHERE username = ?", (username,))
    row = cursor.fetchone()
    if not row:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    user_id = row[0]
    user = get_user(user_id)
    balance = user['card_balance']
    if balance > 0:
        cursor.execute("INSERT INTO card_history (user_id, amount, timestamp, type) VALUES (?, ?, ?, ?)", (user_id, -balance, datetime.now(tz), 'withdraw'))
        conn.commit()
    update_user(user_id, card_status='blocked', block_reason='admin', card_balance=0.0, card_number=None, cvv=None, card_password=None, api_token=None, card_activation_date=None)
    bot.send_message(message.chat.id, "–ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    log_admin_action(message.chat.id, f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∫–∞—Ä—Ç—É {username}")

@bot.callback_query_handler(func=lambda call: call.data == "unblock_card_admin")
def unblock_card_admin(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="manage_cards"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_unblock_card_admin)

def process_unblock_card_admin(message):
    username = message.text.lstrip('@')
    cursor.execute("SELECT id FROM users WHERE username = ?", (username,))
    row = cursor.fetchone()
    if not row:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    user_id = row[0]
    update_user(user_id, card_status='inactive', block_reason=None)
    bot.send_message(message.chat.id, "–ö–∞—Ä—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
    log_admin_action(message.chat.id, f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∫–∞—Ä—Ç—É {username}")

@bot.callback_query_handler(func=lambda call: call.data == "payout_cards")
def payout_cards(call):
    # Backup successful table to CSV
    cursor.execute("SELECT * FROM successful")
    rows = cursor.fetchall()
    backup_filename = f"successful_backup_{datetime.now(tz).strftime('%Y-%m-%d_%H-%M-%S')}.csv"
    with open(backup_filename, "w", newline='') as f:
        writer = csv.writer(f)
        writer.writerow(['id', 'user_id', 'phone_number', 'hold_time', 'acceptance_time', 'flight_time', 'type'])
        writer.writerows(rows)
    bot.send_document(call.message.chat.id, open(backup_filename, "rb"))

    # Generate report with payouts
    stats = get_successful()
    report_filename = f"payout_report_{datetime.now(tz).strftime('%Y-%m-%d_%H-%M-%S')}.csv"
    with open(report_filename, "w", newline='') as f:
        writer = csv.writer(f)
        writer.writerow(['username', 'phone_number', 'type', 'hold_time', 'payout'])
        payouts = {}
        for item in stats:
            user_id = item['user_id']
            user = get_user(user_id)
            sub = user['subscription_type']
            hour_price, min30_price = get_price_increase(sub)
            hold = item['hold_time']
            if hold:
                hours, mins = map(int, hold.split(':'))
                payout = hours * hour_price + (mins // 30) * min30_price
                if user_id not in payouts:
                    payouts[user_id] = 0
                payouts[user_id] += payout
                writer.writerow([user['username'], item['phone_number'], item['type'], hold, payout])

    for user_id, total_payout in payouts.items():
        user = get_user(user_id)
        update_user(user_id, card_balance=user['card_balance'] + total_payout)
        cursor.execute("INSERT INTO card_history (user_id, amount, timestamp, type) VALUES (?, ?, ?, ?)", (user_id, total_payout, datetime.now(tz), 'deposit'))
        bot.send_message(user_id, f"–í–∞–º –ø—Ä–∏—à–ª–∞ –≤—ã–ø–ª–∞—Ç–∞ {total_payout}$")

    conn.commit()

    bot.send_document(call.message.chat.id, open(report_filename, "rb"))
    # Send to group/channel
    try:
        bot.send_document(config.CHANNEL, open(report_filename, "rb"))
    except:
        pass  # If fails, ignore

    # Clear successful table
    cursor.execute("DELETE FROM successful")
    conn.commit()

    bot.answer_callback_query(call.id, "–í—ã–ø–ª–∞—Ç—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã, –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞")
    log_admin_action(call.from_user.id, "–ù–∞—á–∏—Å–ª–∏–ª –≤—ã–ø–ª–∞—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—ã")

@bot.callback_query_handler(func=lambda call: call.data == "give_card_balance")
def give_card_balance(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º–∞ —é–∑–µ—Ä–Ω–µ–π–º"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="manage_cards"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_give_card_balance)

def process_give_card_balance(message):
    parts = message.text.split()
    if len(parts) != 2 or not parts[0].replace('.', '', 1).isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    amount = float(parts[0])
    username = parts[1].lstrip('@')
    cursor.execute("SELECT id FROM users WHERE username = ?", (username,))
    row = cursor.fetchone()
    if not row:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    user_id = row[0]
    user = get_user(user_id)
    update_user(user_id, card_balance=user['card_balance'] + amount)
    cursor.execute("INSERT INTO card_history (user_id, amount, timestamp, type) VALUES (?, ?, ?, ?)", (user_id, amount, datetime.now(tz), 'deposit'))
    conn.commit()
    bot.send_message(user_id, f"–í–∞–º –ø—Ä–∏—à–ª–∞ –≤—ã–ø–ª–∞—Ç–∞ {amount}$")
    bot.send_message(message.chat.id, "–ë–∞–ª–∞–Ω—Å –≤—ã–¥–∞–Ω")
    log_admin_action(message.chat.id, f"–í—ã–¥–∞–ª –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã {amount} {username}")

@bot.callback_query_handler(func=lambda call: call.data == "deduct_card_balance")
def deduct_card_balance(call):
    caption = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º–∞ —é–∑–µ—Ä–Ω–µ–π–º"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="manage_cards"))
    bot.edit_message_text(caption, call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_deduct_card_balance)

def process_deduct_card_balance(message):
    parts = message.text.split()
    if len(parts) != 2 or not parts[0].replace('.', '', 1).isdigit():
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        return
    amount = float(parts[0])
    username = parts[1].lstrip('@')
    cursor.execute("SELECT id FROM users WHERE username = ?", (username,))
    row = cursor.fetchone()
    if not row:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    user_id = row[0]
    user = get_user(user_id)
    new_balance = user['card_balance'] - amount
    if new_balance < 0:
        new_balance = 0
        amount = user['card_balance']
    update_user(user_id, card_balance=new_balance)
    cursor.execute("INSERT INTO card_history (user_id, amount, timestamp, type) VALUES (?, ?, ?, ?)", (user_id, -amount, datetime.now(tz), 'withdraw'))
    conn.commit()
    bot.send_message(message.chat.id, "–ë–∞–ª–∞–Ω—Å —Å–ø–∏—Å–∞–Ω")
    log_admin_action(message.chat.id, f"–°–ø–∏—Å–∞–ª –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã {amount} {username}")

@bot.callback_query_handler(func=lambda call: call.data == "card_history")
def card_history(call):
    cursor.execute("SELECT u.username, h.amount, h.timestamp, h.type, h.id FROM card_history h JOIN users u ON h.user_id = u.id ORDER BY h.timestamp DESC")
    rows = cursor.fetchall()
    text = ""
    for r in rows:
        if r[3] in ['deposit', 'transfer_in']:
            sign = '+'
        else:
            sign = '-'
        text += f"{r[0]} {sign}{abs(r[1])} {r[2]} {r[3]}\n"
    with open("card_history.txt", "w") as f:
        f.write(text)
    bot.send_document(call.message.chat.id, open("card_history.txt", "rb"))
    log_admin_action(call.from_user.id, "–ò—Å—Ç–æ—Ä–∏—è –∫–∞—Ä—Ç")

@bot.callback_query_handler(func=lambda call: call.data == "users_with_card")
def users_with_card(call):
    cursor.execute("SELECT username, card_activation_date FROM users WHERE card_number IS NOT NULL")
    rows = cursor.fetchall()
    text = "\n".join(f"{r[0]} {r[1]}" for r in rows)
    with open("users_with_card.txt", "w") as f:
        f.write(text)
    bot.send_document(call.message.chat.id, open("users_with_card.txt", "rb"))
    log_admin_action(call.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∫–∞—Ä—Ç–æ–π")

@bot.callback_query_handler(func=lambda call: call.data == "blocked_cards")
def blocked_cards(call):
    cursor.execute("SELECT username FROM users WHERE card_status = 'blocked'")
    rows = cursor.fetchall()
    text = "\n".join(r[0] for r in rows)
    with open("blocked_cards.txt", "w") as f:
        f.write(text)
    bot.send_document(call.message.chat.id, open("blocked_cards.txt", "rb"))
    log_admin_action(call.from_user.id, "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã")

@bot.callback_query_handler(func=lambda call: call.data == "unblocked_cards")
def unblocked_cards(call):
    cursor.execute("SELECT username FROM users WHERE card_status = 'active'")
    rows = cursor.fetchall()
    text = "\n".join(r[0] for r in rows)
    with open("unblocked_cards.txt", "w") as f:
        f.write(text)
    bot.send_document(call.message.chat.id, open("unblocked_cards.txt", "rb"))
    log_admin_action(call.from_user.id, "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∫–∞—Ä—Ç—ã")

@bot.callback_query_handler(func=lambda call: call.data == "block_all_cards")
def block_all_cards(call):
    cursor.execute("SELECT id, card_balance FROM users WHERE card_number IS NOT NULL")
    rows = cursor.fetchall()
    for row in rows:
        user_id = row[0]
        balance = row[1]
        if balance > 0:
            cursor.execute("INSERT INTO card_history (user_id, amount, timestamp, type) VALUES (?, ?, ?, ?)", (user_id, -balance, datetime.now(tz), 'withdraw'))
    cursor.execute("UPDATE users SET card_status = 'blocked', block_reason='admin', card_balance=0.0, card_number=NULL, cvv=NULL, card_password=NULL, api_token=NULL, card_activation_date=NULL WHERE card_number IS NOT NULL")
    conn.commit()
    bot.answer_callback_query(call.id, "–í—Å–µ –∫–∞—Ä—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    log_admin_action(call.from_user.id, "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤—Å–µ –∫–∞—Ä—Ç—ã")

@bot.callback_query_handler(func=lambda call: call.data == "unblock_all_cards")
def unblock_all_cards(call):
    cursor.execute("UPDATE users SET card_status = 'inactive', block_reason=NULL WHERE card_number IS NOT NULL")
    conn.commit()
    bot.answer_callback_query(call.id, "–í—Å–µ –∫–∞—Ä—Ç—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
    log_admin_action(call.from_user.id, "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤—Å–µ –∫–∞—Ä—Ç—ã")

@bot.callback_query_handler(func=lambda call: call.data == "users_report")
def users_report(call):
    cursor.execute("SELECT username FROM users")
    rows = cursor.fetchall()
    text = "\n".join(r[0] for r in rows)
    with open("users_report.txt", "w") as f:
        f.write(text)
    bot.send_document(call.message.chat.id, open("users_report.txt", "rb"))
    log_admin_action(call.from_user.id, "–û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

@bot.callback_query_handler(func=lambda call: call.data == "back_admin")
def back_admin(call):
    fake_message = types.Message(message_id=call.message.message_id, from_user=call.from_user, chat=call.message.chat, text='/admin', date=0)
    admin_panel(fake_message)

@bot.message_handler(commands=['hold'])
def hold(message):
    successful = get_successful(message.chat.id)
    text = "\n".join(f"{item['phone_number']} ({item['type']}) —Ö–æ–ª–¥: {item['hold_time']}" for item in successful if item['hold_time'])
    bot.send_message(message.chat.id, text or f"–ù–µ—Ç —Ö–æ–ª–¥–æ–≤ >= {MIN_HOLD_MINUTES} –º–∏–Ω")

@bot.message_handler(commands=['del'])
def del_number(message):
    phone = message.text.split()[1] if len(message.text.split()) > 1 else None
    if not phone:
        bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç /del –Ω–æ–º–µ—Ä")
        return
    cursor.execute("DELETE FROM queue WHERE phone_number = ? AND user_id = ?", (phone, message.chat.id))
    conn.commit()
    bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —É–¥–∞–ª–µ–Ω" if cursor.rowcount > 0 else "–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    log_action(message.chat.id, f"–£–¥–∞–ª–∏–ª –Ω–æ–º–µ—Ä {phone}")

@bot.message_handler(commands=['menu'])
def menu(message):
    show_main_menu(message.chat.id)

@bot.message_handler(commands=['holdall'])
def holdall(message):
    if not is_admin(message.chat.id):
        return
    successful = get_successful()
    text = "\n".join(f"{get_user(item['user_id'])['username']} {item['phone_number']} ({item['type']}) —Ö–æ–ª–¥: {item['hold_time']}" for item in successful if item['hold_time'])
    bot.send_message(message.chat.id, text or "–ù–µ—Ç —Ö–æ–ª–¥–æ–≤")

@bot.message_handler(commands=['queue'])
def queue_cmd(message):
    user = get_user(message.chat.id)
    sub = user['subscription_type']
    if sub not in ['Gold Tier', 'Prime Plus', 'VIP Nexus']:
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π")
        return
    queue = sort_queue(get_queue())
    text = "\n".join(f"{item['phone_number']} ({item['type']})" for item in queue)
    bot.send_message(message.chat.id, text or "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")

@bot.message_handler(commands=['moder'])
def moder(message):
    user = get_user(message.chat.id)
    sub = user['subscription_type']
    if sub not in ['Prime Plus', 'VIP Nexus']:
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π")
        return
    # Placeholder
    bot.send_message(message.chat.id, "–ú–æ–¥–µ—Ä –≤—ã–¥–∞–Ω")

@bot.message_handler(commands=['mut'])
def mut(message):
    user = get_user(message.chat.id)
    sub = user['subscription_type']
    if sub != 'VIP Nexus':
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π VIP Nexus")
        return
    parts = message.text.split()
    if len(parts) != 3:
        bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç /mut —é–∑–µ—Ä–Ω–µ–π–º –≤—Ä–µ–º—è")
        return
    username = parts[1]
    time = parts[2]
    # Placeholder
    bot.send_message(message.chat.id, f"–ú—É—Ç –≤—ã–¥–∞–Ω {username} –Ω–∞ {time}")

@bot.message_handler(commands=['help'])
def help_cmd(message):
    text = "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/hold - –¢–≤–æ–π —Ö–æ–ª–¥\n/del - –£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (—Ñ–æ—Ä–º–∞—Ç /del –Ω–æ–º–µ—Ä)\n/menu - –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é"
    bot.send_message(message.chat.id, text)

def check_inactivity():
    threshold = datetime.now(tz) - timedelta(days=config.INACTIVITY_DAYS)
    cursor.execute("SELECT id FROM users WHERE last_activity < ?", (threshold,))
    inactive = cursor.fetchall()
    for u in inactive:
        cursor.execute("SELECT referer_id FROM referrals WHERE referee_id = ?", (u[0],))
        referers = cursor.fetchall()
        for ref in referers:
            referer = get_user(ref[0])
            update_user(ref[0], balance=max(0, referer['balance'] - config.REFERRAL_REWARD), referrals_count=referer['referrals_count'] - 1)
            bot.send_message(ref[0], f"-$ {config.REFERRAL_REWARD}: —Ä–µ—Ñ–µ—Ä–∞–ª {u[0]} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")

threading.Timer(86400, check_inactivity).start()

# Global variables for mega broadcast
mega_layout = None
mega_buttons = []
mega_content = None

bot.infinity_polling()